{"version":3,"file":"static/js/90.0ee2eaf1.chunk.js","mappings":"qIACO,SAAUA,IACjB,OAAQC,MAAM,0FACRC,MAAK,SAAAC,GACD,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,IAAIC,MAAJ,8CACvB,GACR,CAEM,SAASC,EAAUC,GACxB,OAAOT,MAAM,iHAAD,OAAkHS,EAAlH,yBAEVR,MAAK,SAAAC,GACC,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,IAAIC,MAAJ,sCACvB,GACR,CAEM,SAASG,EAAgBC,GAC9B,OAAOX,MAAM,sCAAD,OAAuCW,EAAvC,8CACVV,MAAK,SAAAC,GACC,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,IAAIC,MAAJ,sCACvB,GACR,CAEM,SAASK,EAAaD,GAC3B,OAAOX,MAAM,sCAAD,OAAuCW,EAAvC,qEACTV,MAAK,SAAAC,GACJ,OAAIA,EAAIC,GACCD,EAAIE,OAERC,QAAQC,OAAO,IAAIC,MAAJ,sCACzB,GAEA,CAEM,SAASM,EAAWF,GACzB,OAAOX,MAAM,sCAAD,OAAuCW,EAAvC,sDACRV,MAAK,SAAAC,GACD,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,IAAIC,MAAJ,sCACvB,GAER,C,gSCjDYO,EAAaC,EAAAA,GAAAA,GAAH,gHAQVC,GAAOD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0GAOJG,EAAQH,EAAAA,GAAAA,GAAH,kJAQLI,EAAYJ,EAAAA,GAAAA,GAAH,iEAITK,EAAQL,EAAAA,GAAAA,IAAH,8M,SCelB,EArCa,WACT,OAAoCM,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAcf,OAZFC,EAAAA,EAAAA,YAAU,WACNH,GAAW,IACX1B,EAAAA,EAAAA,MACCE,MAAK,YAAkB,IAAf4B,EAAc,EAAdA,QACDN,EAAcM,EACjB,IACJC,OAAM,SAAAC,GACHC,EAAAA,GAAAA,MAAY,sCACf,IACAC,QAAQR,GAAW,GACzB,GAAE,CAACH,KAGM,6BACI,SAACR,EAAD,6BACCQ,IAAe,SAACJ,EAAD,UACXI,EAAWY,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAC1B,OAAO,SAAClB,EAAD,WACH,UAACH,EAAD,CAAMsB,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMd,GAA1C,WACI,SAACN,EAAD,CAAOqB,IAAKJ,EAAW,0CACcA,GACnC,mCAAoCK,IAAKN,KAC/C,SAAEtB,EAAF,UAAcsB,QALKD,EAQtB,MAERX,IAAW,SAACmB,EAAA,EAAD,MAG3B,C","sources":["Api.js","pages/HomeFolder/Home.js","pages/HomeFolder/Home.jsx"],"sourcesContent":["\nexport function  getTrendingMovies(){\nreturn  fetch(`https://api.themoviedb.org/3/trending/all/day?api_key=ebb8165ea943e33fa7a8dadcac1ff998` )\n     .then(res => {\n          if (res.ok) {\n            return res.json()\n          };\n          return Promise.reject(new Error(`for this query trending nothing was found `))\n        })\n} \n\nexport function getMovies(filterQuery) {\n  return fetch(`https://api.themoviedb.org/3/search/movie?api_key=ebb8165ea943e33fa7a8dadcac1ff998&language=en-USpage=1&query=${filterQuery}&include_adult=false`)\n \n   .then(res => {\n          if (res.ok) {\n            return res.json()\n          };\n          return Promise.reject(new Error(`for this query  nothing was found `))\n        })\n}\n\nexport function getMoviedetails(movieId) {\n  return fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=ebb8165ea943e33fa7a8dadcac1ff998`) \n   .then(res => {\n          if (res.ok) {\n            return res.json()\n          };\n          return Promise.reject(new Error(`for this query  nothing was found `))\n        })\n}\n\nexport function getCastMovie(movieId) {\n  return fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=ebb8165ea943e33fa7a8dadcac1ff998&language=en-US`)\n    .then(res => {\n      if (res.ok) {\n        return res.json()\n      };\n    return Promise.reject(new Error(`for this query  nothing was found `)) \n})\n\n}\n\nexport function getReviews(movieId) {\n  return fetch(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=ebb8165ea943e33fa7a8dadcac1ff998`)\n     .then(res => {\n          if (res.ok) {\n            return res.json()         \n          };\n          return Promise.reject(new Error(`for this query  nothing was found `))\n        })\n\n}\n\n\n\n\n\n\n\n","import styled from 'styled-components';\nimport { NavLink } from \"react-router-dom\";\n\nexport const MovieTitle = styled.h1`\n    padding: 4px;\n    margin-left: 35px;\n    font-size: 20px;\n    color: #182351;\n\n`;\n\nexport const Link = styled(NavLink)`\n   \n    text-decoration: none;\n    color: rgb(0, 0, 0);\n    font-weight: 500;\n`;\n\nexport const Lists = styled.ul`   \n    display: flex;\n    flex-wrap: wrap;\n    -webkit-box-pack: center;\n    justify-content: center;\n    gap: 20px;\n`;\n\nexport const ImageItem = styled.li`\n   flex-basis: calc((100% - 60px) / 4);\n`;\n\nexport const Image = styled.img`\n margin-bottom: 10px;\n    transition: background 250ms cubic-bezier(0.075, 0.82, 0.165, 1) 0s, box-shadow 250ms cubic-bezier(0.075, 0.82, 0.165, 1) 0s;\n    border-radius: 5px;\n \n`;","\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader.jsx'\nimport { toast } from 'react-toastify';\nimport { getTrendingMovies } from '../../Api';\nimport {ImageItem, Image,  MovieTitle, Lists, Link } from './Home';\n\nconst Home = () => {    \n    const [moviesList, setMoviesList] = useState([]);  \n    const [loading, setLoading] = useState(false);\n    const location = useLocation();\n\n    useEffect(() => {\n        setLoading(true)\n        getTrendingMovies()  \n        .then(({ results }) => {\n                setMoviesList(results)\n            })       \n        .catch(error => {\n            toast.error('Something went wrong! Please retry!');\n        })\n        .finally(setLoading(false))\n  }, [moviesList]);  \n\n      return (\n            <main>\n                <MovieTitle>Trending today</MovieTitle>\n                {moviesList &&  <Lists>                \n                    {moviesList.map(({ id, title, poster_path }) => {              \n                        return <ImageItem key={id}>\n                            <Link to={`/movies/${id}`} state={{ from: location }}>\n                                <Image src={poster_path\n                                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                                : 'https://image.tmdb.org/t/p/w500/'} alt={title} />\n                            < MovieTitle>{title}</ MovieTitle> \n                            </Link>                        \n                            </ImageItem>\n                        })}             \n                </Lists>}\n                {loading && <Loader/>} \n            </main>\n        )\n}\n \nexport default Home;"],"names":["getTrendingMovies","fetch","then","res","ok","json","Promise","reject","Error","getMovies","filterQuery","getMoviedetails","movieId","getCastMovie","getReviews","MovieTitle","styled","Link","NavLink","Lists","ImageItem","Image","useState","moviesList","setMoviesList","loading","setLoading","location","useLocation","useEffect","results","catch","error","toast","finally","map","id","title","poster_path","to","state","from","src","alt","Loader"],"sourceRoot":""}